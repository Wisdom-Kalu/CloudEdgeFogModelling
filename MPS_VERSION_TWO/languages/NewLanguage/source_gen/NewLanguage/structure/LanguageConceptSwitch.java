package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int API = 0;
  public static final int Action = 1;
  public static final int Aggregate = 2;
  public static final int AnalysingData = 3;
  public static final int Archive = 4;
  public static final int AsynchronousRequestReply = 5;
  public static final int Batch = 6;
  public static final int Classify = 7;
  public static final int Cleaning = 8;
  public static final int ClientServerConnection = 9;
  public static final int Cloud = 10;
  public static final int Column = 11;
  public static final int Component = 12;
  public static final int ComponentBehavior = 13;
  public static final int Compress = 14;
  public static final int ComputingUnit = 15;
  public static final int Connection = 16;
  public static final int ConnectionType = 17;
  public static final int ConsumingData = 18;
  public static final int DataArchitecture = 19;
  public static final int DataGeneration = 20;
  public static final int DataIngestion = 21;
  public static final int DataLinkableElement = 22;
  public static final int DataLocation = 23;
  public static final int DataPort = 24;
  public static final int DataProcessing = 25;
  public static final int Describe = 26;
  public static final int Diagnoze = 27;
  public static final int Document = 28;
  public static final int Edge = 29;
  public static final int EmbeddedFlashMemory = 30;
  public static final int Event = 31;
  public static final int FTP = 32;
  public static final int FileSystems = 33;
  public static final int Filter = 34;
  public static final int Fog = 35;
  public static final int Govern = 36;
  public static final int Graph = 37;
  public static final int HTTP_HTTPS = 38;
  public static final int Historical = 39;
  public static final int IPFS = 40;
  public static final int Identify = 41;
  public static final int InDataPort = 42;
  public static final int Integrate = 43;
  public static final int KeyValue = 44;
  public static final int Link = 45;
  public static final int LoadBalancer = 46;
  public static final int LocalStorage = 47;
  public static final int MQTT = 48;
  public static final int Math_Operation = 49;
  public static final int Merge = 50;
  public static final int MessageQueueing = 51;
  public static final int NVMe = 52;
  public static final int NetworkProtocols = 53;
  public static final int NewSQL = 54;
  public static final int NoSQL = 55;
  public static final int OutDataPort = 56;
  public static final int PointToPoint = 57;
  public static final int Predict = 58;
  public static final int Prescript = 59;
  public static final int ProcessingType = 60;
  public static final int PublisherSubscriberConnection = 61;
  public static final int PushPull = 62;
  public static final int Qualitative = 63;
  public static final int Quantitative = 64;
  public static final int QueryReport = 65;
  public static final int RealTime = 66;
  public static final int Real_Time = 67;
  public static final int ReceiveData = 68;
  public static final int ReduceNoise = 69;
  public static final int RequestResponse = 70;
  public static final int Retrieve = 71;
  public static final int SSDs = 72;
  public static final int Save = 73;
  public static final int SendData = 74;
  public static final int Sort = 75;
  public static final int Statistical = 76;
  public static final int StorageType = 77;
  public static final int StoringData = 78;
  public static final int Stream = 79;
  public static final int StreamProcessing = 80;
  public static final int TCP_IP = 81;
  public static final int Technique = 82;
  public static final int TimeStamp = 83;
  public static final int Transform = 84;
  public static final int Transforme = 85;
  public static final int Type = 86;
  public static final int Validate = 87;
  public static final int Visualize = 88;
  public static final int WebSocket = 89;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xacb8b23f2e494a72L, 0x81778145a5dc30fcL);
    builder.put(0xe6c625abc8b2fa9L, API);
    builder.put(0xe6c625abc8b2f84L, Action);
    builder.put(0xe6c625abc8b2fa0L, Aggregate);
    builder.put(0xe6c625abc8b2f8eL, AnalysingData);
    builder.put(0xe6c625abc8b2fa3L, Archive);
    builder.put(0x7e0c8e534ed5473bL, AsynchronousRequestReply);
    builder.put(0x7e0c8e534ed545eeL, Batch);
    builder.put(0xe6c625abc8b2f9bL, Classify);
    builder.put(0xe6c625abc8b2f9eL, Cleaning);
    builder.put(0x7e0c8e534ed54726L, ClientServerConnection);
    builder.put(0x7e0c8e534ed5463bL, Cloud);
    builder.put(0x7e0c8e534ed545cbL, Column);
    builder.put(0x7e0c8e534ed5460bL, Component);
    builder.put(0xe6c625abc8b2f80L, ComponentBehavior);
    builder.put(0xe6c625abc8b2f93L, Compress);
    builder.put(0x7e0c8e534ed545daL, ComputingUnit);
    builder.put(0x7e0c8e534ed5461fL, Connection);
    builder.put(0x7e0c8e534ed5471eL, ConnectionType);
    builder.put(0xe6c625abc8b2fa6L, ConsumingData);
    builder.put(0x7e0c8e534ed54601L, DataArchitecture);
    builder.put(0xe6c625abc8b2f83L, DataGeneration);
    builder.put(0xe6c625abc8b2f91L, DataIngestion);
    builder.put(0xe6c625abc8b2f7aL, DataLinkableElement);
    builder.put(0x7e0c8e534ed545e9L, DataLocation);
    builder.put(0x7e0c8e534ed5461dL, DataPort);
    builder.put(0xe6c625abc8b2f9cL, DataProcessing);
    builder.put(0xe6c625abc8b2f8aL, Describe);
    builder.put(0xe6c625abc8b2f8bL, Diagnoze);
    builder.put(0x7e0c8e534ed545b2L, Document);
    builder.put(0x7e0c8e534ed5464aL, Edge);
    builder.put(0x7e0c8e534ed54536L, EmbeddedFlashMemory);
    builder.put(0xe6c625abc8b2f7dL, Event);
    builder.put(0x7e0c8e534ed54733L, FTP);
    builder.put(0x7e0c8e534ed54572L, FileSystems);
    builder.put(0xe6c625abc8b2f9aL, Filter);
    builder.put(0x7e0c8e534ed54645L, Fog);
    builder.put(0xe6c625abc8b2fa2L, Govern);
    builder.put(0x7e0c8e534ed545cfL, Graph);
    builder.put(0x7e0c8e534ed54730L, HTTP_HTTPS);
    builder.put(0x7e0c8e534ed545d1L, Historical);
    builder.put(0x7e0c8e534ed5459cL, IPFS);
    builder.put(0xe6c625abc8b2f97L, Identify);
    builder.put(0x7e0c8e534ed54678L, InDataPort);
    builder.put(0xe6c625abc8b2f92L, Integrate);
    builder.put(0x7e0c8e534ed545cdL, KeyValue);
    builder.put(0xe6c625abc8b2f82L, Link);
    builder.put(0x7e0c8e534ed5466eL, LoadBalancer);
    builder.put(0x7e0c8e534ed54531L, LocalStorage);
    builder.put(0x7e0c8e534ed5471bL, MQTT);
    builder.put(0xe6c625abc8b2f9dL, Math_Operation);
    builder.put(0xe6c625abc8b2f98L, Merge);
    builder.put(0x7e0c8e534ed54741L, MessageQueueing);
    builder.put(0x7e0c8e534ed5456bL, NVMe);
    builder.put(0x7e0c8e534ed54713L, NetworkProtocols);
    builder.put(0x7e0c8e534ed54593L, NewSQL);
    builder.put(0x7e0c8e534ed5458bL, NoSQL);
    builder.put(0x7e0c8e534ed5467aL, OutDataPort);
    builder.put(0x7e0c8e534ed54735L, PointToPoint);
    builder.put(0xe6c625abc8b2f8cL, Predict);
    builder.put(0xe6c625abc8b2f8dL, Prescript);
    builder.put(0x7e0c8e534ed545ecL, ProcessingType);
    builder.put(0x7e0c8e534ed54723L, PublisherSubscriberConnection);
    builder.put(0x7e0c8e534ed54729L, PushPull);
    builder.put(0xe6c625abc8b2f88L, Qualitative);
    builder.put(0xe6c625abc8b2f87L, Quantitative);
    builder.put(0xe6c625abc8b2fa7L, QueryReport);
    builder.put(0x7e0c8e534ed545f0L, RealTime);
    builder.put(0x7e0c8e534ed54746L, Real_Time);
    builder.put(0xe6c625abc8b2f7fL, ReceiveData);
    builder.put(0xe6c625abc8b2f94L, ReduceNoise);
    builder.put(0x7e0c8e534ed5472dL, RequestResponse);
    builder.put(0xe6c625abc8b2fa5L, Retrieve);
    builder.put(0x7e0c8e534ed54553L, SSDs);
    builder.put(0xe6c625abc8b2fa4L, Save);
    builder.put(0xe6c625abc8b2f85L, SendData);
    builder.put(0xe6c625abc8b2f99L, Sort);
    builder.put(0xe6c625abc8b2f89L, Statistical);
    builder.put(0x373852133ac681dbL, StorageType);
    builder.put(0xe6c625abc8b2fa1L, StoringData);
    builder.put(0x7e0c8e534ed545d6L, Stream);
    builder.put(0x7e0c8e534ed54738L, StreamProcessing);
    builder.put(0x7e0c8e534ed54718L, TCP_IP);
    builder.put(0xe6c625abc8b2f86L, Technique);
    builder.put(0x7e0c8e534ed545d8L, TimeStamp);
    builder.put(0xe6c625abc8b2f95L, Transform);
    builder.put(0xe6c625abc8b2fc9L, Transforme);
    builder.put(0xe6c625abc8b2f8fL, Type);
    builder.put(0xe6c625abc8b2f96L, Validate);
    builder.put(0xe6c625abc8b2fa8L, Visualize);
    builder.put(0x7e0c8e534ed5473eL, WebSocket);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
