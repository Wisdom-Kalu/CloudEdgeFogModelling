package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AsynchronousRequestReply;
  private ConceptPresentation props_Batch;
  private ConceptPresentation props_ClientServerConnection;
  private ConceptPresentation props_Cloud;
  private ConceptPresentation props_Column;
  private ConceptPresentation props_Component;
  private ConceptPresentation props_ComputingUnit;
  private ConceptPresentation props_Connection;
  private ConceptPresentation props_ConnectionType;
  private ConceptPresentation props_DataArchitecture;
  private ConceptPresentation props_DataLocation;
  private ConceptPresentation props_DataPort;
  private ConceptPresentation props_Document;
  private ConceptPresentation props_Edge;
  private ConceptPresentation props_EmbeddedFlashMemory;
  private ConceptPresentation props_FTP;
  private ConceptPresentation props_FileSystems;
  private ConceptPresentation props_Fog;
  private ConceptPresentation props_Graph;
  private ConceptPresentation props_HTTP_HTTPS;
  private ConceptPresentation props_Historical;
  private ConceptPresentation props_IPFS;
  private ConceptPresentation props_InDataPort;
  private ConceptPresentation props_KeyValue;
  private ConceptPresentation props_LoadBalancer;
  private ConceptPresentation props_LocalStorage;
  private ConceptPresentation props_MQTT;
  private ConceptPresentation props_MessageQueueing;
  private ConceptPresentation props_NVMe;
  private ConceptPresentation props_NetworkProtocols;
  private ConceptPresentation props_NewSQL;
  private ConceptPresentation props_NoSQL;
  private ConceptPresentation props_NodeBehavior;
  private ConceptPresentation props_OutDataPort;
  private ConceptPresentation props_PointToPoint;
  private ConceptPresentation props_ProcessingType;
  private ConceptPresentation props_PublisherSubscriberConnection;
  private ConceptPresentation props_PushPull;
  private ConceptPresentation props_RealTime;
  private ConceptPresentation props_Real_Time;
  private ConceptPresentation props_RequestResponse;
  private ConceptPresentation props_SSDs;
  private ConceptPresentation props_StorageType;
  private ConceptPresentation props_Stream;
  private ConceptPresentation props_StreamProcessing;
  private ConceptPresentation props_TCP_IP;
  private ConceptPresentation props_TimeStamp;
  private ConceptPresentation props_WebSocket;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AsynchronousRequestReply:
        if (props_AsynchronousRequestReply == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AsynchronousRequestReply = cpb.create();
        }
        return props_AsynchronousRequestReply;
      case LanguageConceptSwitch.Batch:
        if (props_Batch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Batch = cpb.create();
        }
        return props_Batch;
      case LanguageConceptSwitch.ClientServerConnection:
        if (props_ClientServerConnection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClientServerConnection = cpb.create();
        }
        return props_ClientServerConnection;
      case LanguageConceptSwitch.Cloud:
        if (props_Cloud == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Cloud = cpb.create();
        }
        return props_Cloud;
      case LanguageConceptSwitch.Column:
        if (props_Column == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Column");
          props_Column = cpb.create();
        }
        return props_Column;
      case LanguageConceptSwitch.Component:
        if (props_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Component = cpb.create();
        }
        return props_Component;
      case LanguageConceptSwitch.ComputingUnit:
        if (props_ComputingUnit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComputingUnit = cpb.create();
        }
        return props_ComputingUnit;
      case LanguageConceptSwitch.Connection:
        if (props_Connection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Connection = cpb.create();
        }
        return props_Connection;
      case LanguageConceptSwitch.ConnectionType:
        if (props_ConnectionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ConnectionType = cpb.create();
        }
        return props_ConnectionType;
      case LanguageConceptSwitch.DataArchitecture:
        if (props_DataArchitecture == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataArchitecture = cpb.create();
        }
        return props_DataArchitecture;
      case LanguageConceptSwitch.DataLocation:
        if (props_DataLocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataLocation = cpb.create();
        }
        return props_DataLocation;
      case LanguageConceptSwitch.DataPort:
        if (props_DataPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DataPort");
          props_DataPort = cpb.create();
        }
        return props_DataPort;
      case LanguageConceptSwitch.Document:
        if (props_Document == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Document");
          props_Document = cpb.create();
        }
        return props_Document;
      case LanguageConceptSwitch.Edge:
        if (props_Edge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Edge = cpb.create();
        }
        return props_Edge;
      case LanguageConceptSwitch.EmbeddedFlashMemory:
        if (props_EmbeddedFlashMemory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmbeddedFlashMemory");
          props_EmbeddedFlashMemory = cpb.create();
        }
        return props_EmbeddedFlashMemory;
      case LanguageConceptSwitch.FTP:
        if (props_FTP == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FTP = cpb.create();
        }
        return props_FTP;
      case LanguageConceptSwitch.FileSystems:
        if (props_FileSystems == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_FileSystems = cpb.create();
        }
        return props_FileSystems;
      case LanguageConceptSwitch.Fog:
        if (props_Fog == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Fog = cpb.create();
        }
        return props_Fog;
      case LanguageConceptSwitch.Graph:
        if (props_Graph == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Graph");
          props_Graph = cpb.create();
        }
        return props_Graph;
      case LanguageConceptSwitch.HTTP_HTTPS:
        if (props_HTTP_HTTPS == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_HTTP_HTTPS = cpb.create();
        }
        return props_HTTP_HTTPS;
      case LanguageConceptSwitch.Historical:
        if (props_Historical == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Historical");
          props_Historical = cpb.create();
        }
        return props_Historical;
      case LanguageConceptSwitch.IPFS:
        if (props_IPFS == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IPFS");
          props_IPFS = cpb.create();
        }
        return props_IPFS;
      case LanguageConceptSwitch.InDataPort:
        if (props_InDataPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InDataPort = cpb.create();
        }
        return props_InDataPort;
      case LanguageConceptSwitch.KeyValue:
        if (props_KeyValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("KeyValue");
          props_KeyValue = cpb.create();
        }
        return props_KeyValue;
      case LanguageConceptSwitch.LoadBalancer:
        if (props_LoadBalancer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LoadBalancer = cpb.create();
        }
        return props_LoadBalancer;
      case LanguageConceptSwitch.LocalStorage:
        if (props_LocalStorage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LocalStorage = cpb.create();
        }
        return props_LocalStorage;
      case LanguageConceptSwitch.MQTT:
        if (props_MQTT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MQTT = cpb.create();
        }
        return props_MQTT;
      case LanguageConceptSwitch.MessageQueueing:
        if (props_MessageQueueing == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MessageQueueing = cpb.create();
        }
        return props_MessageQueueing;
      case LanguageConceptSwitch.NVMe:
        if (props_NVMe == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NVMe");
          props_NVMe = cpb.create();
        }
        return props_NVMe;
      case LanguageConceptSwitch.NetworkProtocols:
        if (props_NetworkProtocols == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NetworkProtocols = cpb.create();
        }
        return props_NetworkProtocols;
      case LanguageConceptSwitch.NewSQL:
        if (props_NewSQL == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NewSQL = cpb.create();
        }
        return props_NewSQL;
      case LanguageConceptSwitch.NoSQL:
        if (props_NoSQL == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NoSQL = cpb.create();
        }
        return props_NoSQL;
      case LanguageConceptSwitch.NodeBehavior:
        if (props_NodeBehavior == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NodeBehavior = cpb.create();
        }
        return props_NodeBehavior;
      case LanguageConceptSwitch.OutDataPort:
        if (props_OutDataPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OutDataPort = cpb.create();
        }
        return props_OutDataPort;
      case LanguageConceptSwitch.PointToPoint:
        if (props_PointToPoint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PointToPoint = cpb.create();
        }
        return props_PointToPoint;
      case LanguageConceptSwitch.ProcessingType:
        if (props_ProcessingType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ProcessingType = cpb.create();
        }
        return props_ProcessingType;
      case LanguageConceptSwitch.PublisherSubscriberConnection:
        if (props_PublisherSubscriberConnection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PublisherSubscriberConnection = cpb.create();
        }
        return props_PublisherSubscriberConnection;
      case LanguageConceptSwitch.PushPull:
        if (props_PushPull == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PushPull = cpb.create();
        }
        return props_PushPull;
      case LanguageConceptSwitch.RealTime:
        if (props_RealTime == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RealTime = cpb.create();
        }
        return props_RealTime;
      case LanguageConceptSwitch.Real_Time:
        if (props_Real_Time == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Real_Time");
          props_Real_Time = cpb.create();
        }
        return props_Real_Time;
      case LanguageConceptSwitch.RequestResponse:
        if (props_RequestResponse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequestResponse = cpb.create();
        }
        return props_RequestResponse;
      case LanguageConceptSwitch.SSDs:
        if (props_SSDs == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SSDs");
          props_SSDs = cpb.create();
        }
        return props_SSDs;
      case LanguageConceptSwitch.StorageType:
        if (props_StorageType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StorageType");
          props_StorageType = cpb.create();
        }
        return props_StorageType;
      case LanguageConceptSwitch.Stream:
        if (props_Stream == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Stream");
          props_Stream = cpb.create();
        }
        return props_Stream;
      case LanguageConceptSwitch.StreamProcessing:
        if (props_StreamProcessing == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StreamProcessing = cpb.create();
        }
        return props_StreamProcessing;
      case LanguageConceptSwitch.TCP_IP:
        if (props_TCP_IP == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TCP_IP = cpb.create();
        }
        return props_TCP_IP;
      case LanguageConceptSwitch.TimeStamp:
        if (props_TimeStamp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TimeStamp");
          props_TimeStamp = cpb.create();
        }
        return props_TimeStamp;
      case LanguageConceptSwitch.WebSocket:
        if (props_WebSocket == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WebSocket = cpb.create();
        }
        return props_WebSocket;
    }
    return null;
  }
}
